<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="HMatrixReverseAccessor" Id="{33fefcdb-926f-0c7b-0261-3622c514816a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK HMatrixReverseAccessor EXTENDS MatrixAccessor
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Initializers" Id="{fbb3bcae-92bb-0187-2edb-c1e9f4b2ebea}" />
    <Folder Name="Overrides" Id="{445fad87-5c75-0ee0-13b4-cd3564957305}" />
    <Property Name="Cols" Id="{38bf019a-6d1a-0ddb-0b0c-32af462480f2}" FolderPath="Overrides\">
      <Declaration><![CDATA[//Total number of columns in this matrix
PROPERTY PUBLIC Cols : UINT]]></Declaration>
      <Get Name="Get" Id="{4ccd7500-5ee9-0a33-1c6f-5e05d86f5daa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT __ISVALIDREF(M_) THEN
	Cols := 0;
	LogWarning('%s Attempted Cols access using uninitialized Matrix Accessor');
ELSE
	Cols := M_.Rows;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetI" Id="{2bbfe692-2637-051a-3d40-ef8411d338fd}" FolderPath="Overrides\">
      <Declaration><![CDATA[METHOD PUBLIC GetI : LREAL
VAR_INPUT
	I : UINT;
END_VAR
VAR
	ThisR : UINT;
	ThisC : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IC2RC(I,Cols,Row => ThisR, Col => ThisC);

IF (ThisR < 3 AND ThisC < 3) OR ThisR = ThisC THEN
	//Transpose the R part or the diagonal (no mod)
	GetI := SUPER^.GetI(I);
ELSE
	//do not transpose the other parts (they will get negated isntead)
	getI := -1 * SUPER^.GetI(I);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{4b571c14-7ad7-0359-3c92-05a5516b311e}" FolderPath="Initializers\">
      <Declaration><![CDATA[METHOD PUBLIC Init
VAR_INPUT
	M : REFERENCE TO HMatrix;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Init_(M);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Rows" Id="{d623675a-c4f7-0845-3b45-1858fde00567}" FolderPath="Overrides\">
      <Declaration><![CDATA[//Total number of rows in this matrix
PROPERTY PUBLIC Rows : UINT]]></Declaration>
      <Get Name="Get" Id="{700ca6bc-e747-0ddc-28b5-8570744aacd2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT __ISVALIDREF(M_) THEN
	Rows := 0;
	LogWarning('%s Attempted Rows access using uninitialized Matrix Accessor');
ELSE
	Rows := M_.Cols;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetI" Id="{06e47383-69e0-0f9a-2195-4f3ea2ae21e6}" FolderPath="Overrides\">
      <Declaration><![CDATA[METHOD PUBLIC SetI : BOOL
VAR_INPUT
	I : UINT;
	Val : LREAL;
END_VAR
VAR
	ThisR : UINT;
	ThisC : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IC2RC(I,Cols,Row => ThisR, Col => ThisC);

IF (ThisR < 3 AND ThisC < 3) OR ThisR = ThisC THEN
	//Transpose the R part or the diagonal (no mod)
	SetI := SUPER^.SetI(I,Val);
ELSE
	//do not transpose the other parts (they will get negated isntead)
	SetI := SUPER^.SetI(I,-1*Val);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="This2Parent" Id="{050b5be5-0368-003f-2fdb-79ca646ab29d}" FolderPath="Overrides\">
      <Declaration><![CDATA[METHOD PROTECTED This2Parent : UINT
VAR_INPUT
	Index : UINT;
END_VAR
VAR
	ThisR : UINT;
	ThisC : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(M_) THEN
	LogWarning('%s Attempted This2Parent calculation using uninitialized Matrix Accessor');
	This2Parent := 0;
	RETURN;
END_IF

IC2RC(Index,Cols,Row => ThisR, Col => ThisC);

IF (ThisR < 3 AND ThisC < 3) OR ThisR = ThisC THEN
	//Transpose the R part or the diagonal (no mod)
	This2Parent := RCC2I(ThisC,ThisR,M_.Cols);
ELSE
	//do not transpose the other parts (they will get negated isntead)
	This2Parent := RCC2I(ThisR,ThisC,M_.Cols);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="HMatrixReverseAccessor">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="HMatrixReverseAccessor.Cols.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="HMatrixReverseAccessor.GetI">
      <LineId Id="17" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="HMatrixReverseAccessor.Init">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="HMatrixReverseAccessor.Rows.Get">
      <LineId Id="9" Count="2" />
      <LineId Id="7" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="HMatrixReverseAccessor.SetI">
      <LineId Id="20" Count="8" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="HMatrixReverseAccessor.This2Parent">
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>