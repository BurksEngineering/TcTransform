<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Vector3" Id="{a554cb68-06e8-4c25-a281-9db38c8b9c07}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Vector3 : 3D Position Vector
======================

Overview
----------------------

This class represents a 3x1 column vector used to represent the position of a point within a coordinate system.

*)
{attribute 'reflection'}
FUNCTION_BLOCK Vector3 EXTENDS StaticMatrix
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	Data : ARRAY[0..cRows*cCols-1] OF LREAL;
END_VAR
VAR CONSTANT
	cRows : UINT := 3;
	cCols : UINT := 1;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Getters" Id="{01735a11-1c40-4dfe-988b-6b9b34137c2f}" />
    <Folder Name="Modifiers" Id="{8e324285-97dc-4281-9f86-9315ddf2c4bd}" />
    <Folder Name="Overrides" Id="{3a2563d0-e037-4f2d-b9c4-5be32df96a2e}" />
    <Folder Name="Properties" Id="{66d185db-65bf-46e9-b4ea-d840906253d9}" />
    <Folder Name="Setters" Id="{9b65100f-9b94-435d-b7be-d69a8d6ba1a5}" />
    <Method Name="FB_init" Id="{c6832443-4ec9-416a-84b9-87fba89117b2}" FolderPath="Overrides\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Init_(cRows,cCols);
Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetI" Id="{f3f833b6-1f3b-4554-9e8d-23e4af82d4eb}" FolderPath="Overrides\">
      <Declaration><![CDATA[//Gets the value of the element in this matrix at the supplied location as if the elements were stored in a 1D row-major array
//:Prerequisites:
// - I < Rows*Cols
// - Matrix is not empty
//If the supplied index is out of bounds the value 0 is returned and a warning is generated in the Error List
METHOD PUBLIC GetI : LREAL//The value of the element at the specified index, or 0 if an invalid index is supplied
VAR_INPUT
	I : UINT;//The index of the element which should have its value returned
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF I >= Length THEN
	GetI := 0.0;
	LogWarning('%s: Attempted I access of out-of-bounds Matrix data');
ELSE
	GetI := Data[I];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetReversed" Id="{5c1921db-4cd8-4d1c-8f23-c502358e3b3b}" FolderPath="Getters\">
      <Declaration><![CDATA[METHOD PUBLIC GetReversed : Vector3
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetReversed := THIS^;
GetReversed.Reverse();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVector3CrossProduct" Id="{961feb14-4685-4ad0-aeec-b684d8840ef7}" FolderPath="Getters\">
      <Declaration><![CDATA[//Equivalent to Result := THIS x M_V
METHOD PUBLIC GetVector3CrossProduct : Vector3
VAR_INPUT
	M_V : REFERENCE TO Vector3;
END_VAR
VAR
	Vs : ARRAY[0..1] OF POINTER TO Matrix;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Vs[0] := THIS;
Vs[1] := ADR(M_V);
Vector_CrossProduct(GetVector3CrossProduct,Vs);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVector3Difference" Id="{a8cdd625-bd8e-03da-2caa-b18f9cf600a9}" FolderPath="Getters\">
      <Declaration><![CDATA[METHOD PUBLIC GetVector3Difference : Vector3
VAR_INPUT
	M_V : REFERENCE TO Vector3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Matrix_ElementDifference(THIS^,M_V,GetVector3Difference);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVector3DotProduct" Id="{5fc5a42d-49e3-41f0-b5c8-885289319f29}" FolderPath="Getters\">
      <Declaration><![CDATA[METHOD PUBLIC GetVector3DotProduct : LREAL
VAR_INPUT
	M_V : Vector3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetVector3DotProduct := GetVectorDotProduct(M_V);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVector3Scaled" Id="{87df2b78-f545-4203-a9c0-dff4277d7b13}" FolderPath="Getters\">
      <Declaration><![CDATA[METHOD PUBLIC GetVector3Scaled : Vector3
VAR_INPUT
	Scalar : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetVector3Scaled := THIS^;
GetVector3Scaled.Scale(Scalar);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetVector3Sum" Id="{e0925fa6-976a-4d00-803f-b43b1fcbfe73}" FolderPath="Getters\">
      <Declaration><![CDATA[METHOD PUBLIC GetVector3Sum : Vector3
VAR_INPUT
	M_V : REFERENCE TO Vector3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Matrix_ElementSum(THIS^,M_V,GetVector3Sum);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reverse" Id="{1b3e24ff-3d73-4b70-9263-9fbc1583bcb5}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC Reverse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Scale(-1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateBy" Id="{59fbbe95-d495-4fad-b321-004c904c3351}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC RotateBy
VAR_INPUT
	M_R : REFERENCE TO RMAtrix;
END_VAR
VAR
	Temp : Vector3 := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_R.RotateVector3(Temp,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateByReverse" Id="{13df80b2-b918-02d1-1a34-9e75c60103ea}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC RotateByReverse
VAR_INPUT
	M_R : REFERENCE TO RMAtrix;
END_VAR
VAR
	Temp : Vector3 := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_R.RotateVector3Reverse(Temp,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetAsCrossProduct" Id="{a9c41c5c-c7b8-4bf5-93a5-afab6ffb1d24}" FolderPath="Setters\">
      <Declaration><![CDATA[METHOD PUBLIC SetAsCrossProduct
VAR_INPUT
	A : REFERENCE TO Vector3;
	B : REFERENCE TO Vector3;
END_VAR
VAR
	Vs : ARRAY[0..1] OF POINTER TO MATRIX;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Vs[0] := ADR(A);
Vs[1] := ADR(B);

Vector_CrossProduct(THIS^,Vs);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetFromComponents" Id="{cfb8f7f5-c7d4-45fd-bf85-30fd34a78de9}" FolderPath="Setters\">
      <Declaration><![CDATA[METHOD PUBLIC SetFromComponents
VAR_INPUT
	Xp : LREAL;
	Yp : LREAL;
	Zp : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[X := Xp;
Y := Yp;
Z := Zp;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetI" Id="{e7628610-08ef-4a26-9e73-9d9c93a271e6}" FolderPath="Overrides\">
      <Declaration><![CDATA[//Sets the element specified by the supplied index to the suppleid value, assuming the data of the matrix is stored in a 1D row-major array
//:Prerequisites: - I < Rows*Cols
METHOD PUBLIC SetI : BOOL//TRUE if the specified index is valid and the data is copied. FLASE otherwise
VAR_INPUT
	I : UINT;//The index specifying which element should be modified
	Val : LREAL;//The value copied to the corresponding element
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF I >= Length THEN
	SetI := FALSE;
	LogWarning('%s: Attempt to set data using I access when I is out of bounds');
ELSE
	SetI := TRUE;
	Data[I] := Val;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SumWith" Id="{00b321dd-f28e-4fd5-a2f8-9310b909e0df}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC SumWith
VAR_INPUT
	M_V : Vector3;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Matrix_ElementSum(THIS^,M_V,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TransformBy" Id="{4c4fbd06-4f82-40bd-a719-ec5fe9b8c264}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC TransformBy
VAR_INPUT
	M_H : REFERENCE TO HMatrix;
END_VAR
VAR
	Temp : Vector3 := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_H.TransformVector3(temp,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TransformByReverse" Id="{ee7c6a48-3991-0e24-3de7-d7ea1e8d4e61}" FolderPath="Modifiers\">
      <Declaration><![CDATA[METHOD PUBLIC TransformByReverse
VAR_INPUT
	M_H : REFERENCE TO HMatrix;
END_VAR
VAR
	Temp : Vector3 := THIS^;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_H.TransformVector3Reverse(Temp,THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="X" Id="{7de2667b-236e-40c4-bf59-9f14c31d7a7c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC X : LREAL]]></Declaration>
      <Get Name="Get" Id="{c1a6d6b3-d84b-4725-913b-a921a05dcd6e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[X := GetI(0);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{81024f22-b3e5-4904-9849-d905f6563f0a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SetI(0,X);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Y" Id="{80a1623f-313f-4956-81ff-6f2c3775f2e5}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Y : LREAL]]></Declaration>
      <Get Name="Get" Id="{95e817e2-c7ec-4b12-96a7-595b25fc17a2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Y := GetI(1);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{eba4d459-580f-4dca-96a7-b7949c2dffa6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SetI(1,Y);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Z" Id="{34fe5864-3581-479d-bb4f-9d84a12d1a3f}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY PUBLIC Z : LREAL]]></Declaration>
      <Get Name="Get" Id="{e67015f0-7e92-4d77-a98e-0f030c78cdc4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Z := GetI(2);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e077f6bb-b582-44f7-a1a4-aa10788ae121}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SetI(2,Z);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="Vector3">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.FB_init">
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="Vector3.GetI">
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.GetReversed">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="Vector3.GetVector3CrossProduct">
      <LineId Id="17" Count="1" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.GetVector3Difference">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.GetVector3DotProduct">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.GetVector3Scaled">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="Vector3.GetVector3Sum">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.Reverse">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.RotateBy">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.RotateByReverse">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.SetAsCrossProduct">
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.SetFromComponents">
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.SetI">
      <LineId Id="22" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.SumWith">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.TransformBy">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.TransformByReverse">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.X.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.X.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.Y.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.Y.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.Z.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Vector3.Z.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>