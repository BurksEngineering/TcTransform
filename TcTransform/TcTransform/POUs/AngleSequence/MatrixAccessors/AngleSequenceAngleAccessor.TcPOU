<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="AngleSequenceAngleAccessor" Id="{556f7b43-876d-0261-0d87-17b11467378e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AngleSequenceAngleAccessor EXTENDS AngleSequenceAccessor
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Overrides" Id="{aa34e675-8f4a-0b47-3732-1c751b3e62eb}" />
    <Method Name="GetI" Id="{e088c83c-3957-031a-2281-773cb73ab6b2}" FolderPath="Overrides\">
      <Declaration><![CDATA[//Gets the value of the element in this matrix at the supplied location as if the elements were stored in a 1D row-major array
//:Prerequisites:
// - I < Rows*Cols
// - Matrix is not empty
//If the supplied index is out of bounds the value 0 is returned and a warning is generated in the Error List
METHOD PUBLIC GetI : LREAL//The value of the element at the specified index, or 0 if an invalid index is supplied
VAR_INPUT
	I : UINT;//The index of the element which should have its value returned
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(O_) THEN
	GetI := 0.0;
	LogWarning('%s Attempted I access to uninitialized Matrix Accessor');
ELSIF IsEmpty THEN
	GetI := 0.0;
	LogWarning('%s: Attempted I access of empty Matrix Accessor');
ELSIF I >= Length THEN
	GetI := 0.0;
	LogWarning('%s: Attempted I access beyond limits of Matrix Accessor');
ELSE
	GetI := O_.GetAngle(I);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetI" Id="{adaadf64-daef-0e15-3505-744be8d1415f}" FolderPath="Overrides\">
      <Declaration><![CDATA[//Sets the element specified by the supplied index to the suppleid value, assuming the data of the matrix is stored in a 1D row-major array
//:Prerequisites: - I < Rows*Cols
METHOD PUBLIC SetI : BOOL//TRUE if the specified index is valid and the data is copied. FLASE otherwise
VAR_INPUT
	I : UINT;//The index specifying which element should be modified
	Val : LREAL;//The value copied to the corresponding element
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(O_) THEN
	SetI := FALSE;
	LogWarning('%s Attempted I access to uninitialized Matrix Accessor');
ELSIF IsEmpty THEN
	SetI := FALSE;
	LogWarning('%s: Attempted I access of empty Matrix Accessor');
ELSIF I >= Length THEN
	SetI := FALSE;
	LogWarning('%s: Attempted I access beyond limits of Matrix Accessor');
ELSE
	SetI := TRUE;
	SetI := O_.SetAngle(I,Val);
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="AngleSequenceAngleAccessor">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="AngleSequenceAngleAccessor.GetI">
      <LineId Id="14" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="AngleSequenceAngleAccessor.SetI">
      <LineId Id="40" Count="2" />
      <LineId Id="34" Count="5" />
      <LineId Id="8" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>